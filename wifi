#!/bin/bash
# ------------------------------------------------------------------------------
# 
# Name: wifi
# Author: Gabe Gonzalez
# 
# Brief: Display wireless network connectivity information.
# 
# ------------------------------------------------------------------------------

##
# Source utilities.
##
. "commandline.sh"
. "io.sh"

##
# Options.
##
VERBOSE=

##
# Exit statuses.
##
EXIT_WIFI_INVALID_INTERFACE=10
EXIT_WIFI_INVALID_CONNECTION_NAME=11
EXIT_WIFI_CONNECT_FAILED=12
EXIT_WIFI_NO_CONNECTION=13

##
# Display Wifi information.
##
main()
{
    cli_options "-h|--help           |Print program usage." \
                "-v|--verbose        |Verbose output." \
                "-c|--connect=signal:|Connect to a wifi signal." \
                "-d|--disconnect     |Disconnect from the currently connected wifi signal." \
                "-F|--full-scan      |Scan for wifi signals (full output)." \
                "-p|--private        |Print your private IP address." \
                "-P|--public         |Print your public IP address." \
                "-S|--scan           |Scan for wifi signals (summary output)."
    if [ $# -eq 0 ]
    then
        wifi_info
    else
        cli_parse "${@}"
    fi

    local help=$(cli_get "help")
    local connect=$(cli_get "connect")
    local disconnect=$(cli_get "disconnect")
    local fullscan=$(cli_get "full-scan")
    local private=$(cli_get "private")
    local public=$(cli_get "public")
    local scan=$(cli_get "scan")

    if [ -n "${help}" ]
    then
        cli_usage
    elif [ -n "${info}" ]
    then
         wifi_info
    elif [ -n "${connect}" ]
    then
        wifi_connect "${connect}"
    elif [ -n "${disconnect}" ]
    then
        wifi_disconnect
    elif [ -n "${scan}" ]
    then
        wifi_scan_full
    elif [ -n "${private}" ]
    then
        wifi_private
    elif [ -n "${public}" ]
    then
        wifi_public
    elif [ -n "${scan}" ]
    then
        wifi_scan_summary
    else
        :
    fi
    exit $?
}

##
# Print wifi information.
##
wifi_info()
{
    local iface=$(wifi_interface_get)
    local ssid=
    local signal=
    wifi_interface_verify "${iface}" || return $?
    ssid=$(wifi_info_get_ssid "${iface}")
    signal=$(wifi_info_get_signal "${iface}")
    echo "${ssid}: ${signal}%"
    return 0
}

##
# Connect to a wifi network.
##
wifi_connect()
{
    local name="${1}"
    wifi_connect_verify "${name}" || return $?
    echo "Connecting to '${name}'."
    sudo netctl stop-all
    sudo netctl start "${name}"
    if [ $? -ne 0 ]
    then
        print_err "Failed to connect."
        return ${EXIT_WIFI_CONNECT_FAILED}
    fi
    return 0
}

##
# Disconnect from the wifi network.
##
wifi_disconnect()
{
    echo "Disconnecting wifi."
    sudo netctl stop-all
    return $?
}

##
# Scan for wireless networks (full output).
##
wifi_scan_full()
{
    sudo iw dev "${iface}" scan
    return $?
}

##
# Scan for wireless networks (summary output).
##
wifi_scan_summary()
{
    local iface=$(wifi_interface_get)
    wifi_interface_verify "${iface}" || return $?
    echo "Scanning for wireless networks."
    local IFS=$'\n'
    local line=
    local info=()
    for line in $(wifi_scan_full)
    do
        if [ "${line:1:4}" == "SSID" ]
        then
            info[0]="${line:7}"
        elif [ "${line:1:6}" == "signal" ]
        then
            info[1]="${line:9}"
        elif [ "${line:1:9}" == "last seen" ]
        then
            info[2]="${line:12}"
        elif [ "${line:1:4}" == "freq" ]
        then
            info[3]="${line:7} MHz"
        else
            continue
        fi
        if [ ${#info[@]} -eq 4 ]
        then
            echo
            echo "SSID      : ${info[0]}"
            echo "Strength  : ${info[1]}"
            echo "Last Seen : ${info[2]}"
            echo "Frequency : ${info[3]}"
            info=()
        fi
    done
    return 0
}

##
# Print your private IP address.
##
wifi_private()
{
    if ! wifi_is_connected
    then
        print_err "No network connection."
        return ${EXIT_WIFI_NO_CONNECTION}
    fi
    echo "Private IP address:"
    local IFS=$' \n'
    local ip=
    for ip in $(hostname -i)
    do
        echo "* ${ip}"
    done
    return 0
}

##
# Print your public IP address.
##
wifi_public()
{
    echo "Public IP address:"
    wget http://checkip.dyndns.org/ -O - -o /dev/null \
        | perl -pe 's/^.*?: (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})<.*/\*\ \1/'
    return $?
}

##
# Return the wifi SSID.
##
wifi_info_get_ssid()
{
    iw dev "${1}" link | grep SSID | sed 's/^[ \t]*SSID: //'
    return $?
}

##
# Return the wifi signal strength.
##
wifi_info_get_signal()
{
    local iface="${1}"
    local netfile="/proc/net/wireless"
    local dbm=$(grep "${iface}" "${netfile}" | awk '{ print $3 }')
    local signal=$(echo "scale=2; ${dbm}/70*100" | bc)
    echo "${signal} / 1" | bc
    return $?
}

##
# Verify that this will be able to connect and that the wifi configuration file
# exists.
##
wifi_connect_verify()
{
    local name="${1}"
    if [ ! -f "/etc/netctl/${name}" ]
    then
        print_err "Unable to connect to '${name}'."
        return ${EXIT_WIFI_INVALID_CONNECTION_NAME}
    fi
    return 0
}

##
# Return the wifi interface.
##
wifi_interface_get()
{
    local IFS=$'\n'
    local line=
    for line in $(ip link show)
    do
        local IFS=$':'
        local columns=(${line})
        local iface="${columns[1]// /}"
        if [ "${iface:0:1}" == "w" ]
        then
            echo "${iface}"
            return 0
        fi
    done
    return 1
}

##
# Verify the wifi interface.
# 
# Example: wlan0, wlp1s0, etc.
##
wifi_interface_verify()
{
    local iface="${1}"
    if [ -z "${iface}" -o "$(wifi_interface_get)" != "${iface}" ]
    then
        print_err "Invalid network interface '${iface}'."
        return ${EXIT_WIFI_INVALID_INTERFACE}
    fi
    return 0
}

##
# Check if wifi network is connected.
##
wifi_is_connected()
{
    wget -q --spider http://google.com
    if [ $? -eq 0 ]; then
        return 0
    fi
    return 1
}

##
# Run script.
##
main "${@}"
