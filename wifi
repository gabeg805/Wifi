#!/bin/bash
# ******************************************************************************
# 
# Name:    wifi
# Author:  Gabriel Gonzalez
# Email:   gabeg@bu.edu
# License: The MIT License (MIT)
# 
# Syntax: wifi [options] [args]
# 
# Description: Display wireless network connectivity information.
# 
# Notes: None.
# 
# ******************************************************************************

# Global variables
PROG="${0##*/}"

# Options
VERBOSE=

# Source utility
. ../lib/util.sh

# Exit statuses
EINFO=10
ESIG=11
ESIGVAL=12
ECON=13

# ******************************************************************************
# Display Wifi information
main()
{
    [ $# -eq 0 ] && usage && exit ${ENORM}
    short="hvic:ds::lpPI:"
    long="help,verbose,info,connect:,disconnect,scan::,list,private,public,iface:"
    args=$(getopt -o "${short}" --long "${long}" --name "${PROG}" -- "${@}")
    [ $? -ne 0 ] && usage && exit ${EGETOPT}
    eval set -- "${args}"

    # Options
    INFO=
    SCAN=
    KEYWORD=
    CONNECT=
    DISCONNECT=
    LIST=
    PRIVATE=
    PUBLIC=
    IFACE=

    # Parse options
    while true; do
        case "${1}" in
            # Print usage
            -h|--help)
                usage
                exit 0
                ;;

            # Verbose output
            -v|--verbose)
                VERBOSE=true
                ;;

            # Print SSID and signal strength
            -i|--info)
                check_multi_arg "INFO"
                INFO=true
                ;;

            # Connect to a wifi network
            -c|--connect)
                check_multi_arg "CONNECT"
                shift
                CONNECT="${1}"
                ;;

            # Disconnect from the currently connected wifi network
            -d|--disconnect)
                check_multi_arg "DISCONNECT"
                DISCONNECT=true
                ;;

            # Scan for wifi networks
            -s|--scan)
                check_multi_arg "SCAN"
                shift
                SCAN=true
                KEYWORD="${1}"
                ;;

            # List interfaces
            -l|--list)
                check_multi_arg "LIST"
                LIST=true
                ;;

            # Print private IP address
            -p|--private)
                check_multi_arg "PRIVATE"
                PRIVATE=true
                ;;

            # Print public IP address
            -P|--public)
                check_multi_arg "PUBLIC"
                PUBLIC=true
                ;;

            # Specify interface to use
            -I|--iface)
                shift
                IFACE="${1}"
                ;;

            # End of options
            --)
                break
                ;;
        esac
        shift
    done

    # Run options
    if [ -n "${INFO}" ]; then
        print_info
    elif [ -n "${CONNECT}" ]; then
        wifi_connect "${CONNECT}"
    elif [ -n "${DISCONNECT}" ]; then
        wifi_disconnect
    elif [ -n "${SCAN}" ]; then
        wifi_scan "${IFACE}" "${SCAN}"
    elif [ -n "${LIST}" ]; then
        list_interfaces
    elif [ -n "${PRIVATE}" ]; then
        print_private_ip_address
    elif [ -n "${PUBLIC}" ]; then
        print_public_ip_address
    else
        :
    fi
}

# ******************************************************************************
# Print program usage
usage() {
    echo "Usage: ${PROG} [options] <arguments>"
    echo
    echo "Options:"
    echo "    -h, --help"
    echo "       Print program usage."
    echo
    echo "    -v, --verbose"
    echo "       Verbose output."
    echo
    echo "    -i, --info"
    echo "       Print the wifi SSID and signal strength."
    echo
    echo "    -c, --connect <signal>"
    echo "        Connect to a wifi signal."
    echo
    echo "    -d, --disconnect"
    echo "       Disconnect from the connected wifi signal."
    echo
    echo "    -S, --scan [<keyword>]"
    echo "        Scan for wifi signals."
    echo
    echo "    -l, --list"
    echo "        List available interfaces."
    echo
    echo "    -p, --private"
    echo "        Print private ip address(es)."
    echo
    echo "    -P, --public"
    echo "        Print public ip address."
    echo
    echo "    -I, --iface <iface>"
    echo "        Specify interface to use (e.g. 'wlan0')."
    echo
    echo "Arguments:"
    echo "    <signal>"
    echo "        Wifi file in /etc/netctl to connect to."
    echo
    echo "    <keyword>"
    echo "        Specific keyword to search in scan output."
    echo
    echo "    <iface>"
    echo "        A network interface."
    echo
}

# ******************************************************************************
# Print wireless information
print_info()
{
    local iface="${1}"
    if ! is_interface "${iface}"; then
        print_err "Unable to print information: Invalid network interface '${iface}'."
        exit ${EINFO}
    fi

    signal=$(get_signal_strength) || exit ${EINFO}
    ssid=$(get_ssid "${iface}") || exit ${EINFO}
    echo "${ssid}: ${signal}%"
}

# ******************************************************************************
# Connect to a wifi network
wifi_connect()
{
    local name="${1}"
    local netdir="/etc/netctl"
    local found=false

    # Look for wifi configuration file
    for net in "${netdir}"/*; do
        if [ -d "${net}" -o "${net}" != "${name}" ]; then
            continue
        fi
        found=true
        break
    done
    if ! ${found}; then
        print_err "Unable to connect to '{name}'."
        exit ${ECON}
    fi

    # Connect to wifi
    print_info "Attempting to connect to '${name}'..."
    sudo netctl stop-all
    sudo netctl start "${name}"

    if [ $? -eq 0 ]; then
        print_info "Connected."
        exit ${ENORM}
    else
        print_err "Failed."
        exit ${ECON}
    fi
}

# ******************************************************************************
# Disconnect from wifi
wifi_disconnect()
{
    print_info "Disconnecting wifi..."
    sudo netctl stop-all
    print_info "Done."
}

# ******************************************************************************
# Scan for wireless networks
wifi_scan()
{
    local iface="${1}"
    if ! is_interface "${iface}"; then
        print_err "Unable to scan wireless networks: Invalid network interface '${iface}'."
        exit ${ESCAN}
    fi

    local scan="${2}"
    case "${scan}" in
        "") search="signal|SSID|$" ;;
        *) search="${scan}" ;;
    esac
    
    print_info "Scanning for wireless networks..."
    sudo iw dev "${iface}" scan \
        | grep --color=always -E "${search}"
}

# ******************************************************************************
# List network interfaces
list_interfaces()
{
    print_info "Listing network interfaces..."
    local iface=
    for iface in $(get_network_interfaces); do
        echo "${iface}"
    done
}

# ******************************************************************************
# Print private ip address
print_private_ip_address()
{
    print_info "Displaying private IP address(es)..."
    local IFS=$' \n'
    local ip=
    for ip in $(hostname -i); do
        echo "${ip}"
    done
}

# ******************************************************************************
# Print public ip address
print_public_ip_address()
{
    print_info "Displaying public IP address..."
    wget http://checkip.dyndns.org/ -O - -o /dev/null \
        | cut -f2 -d':' \
        | cut -f1 -d'<' \
        | tr -d ' '
}

# ******************************************************************************
# Return wifi signal strength
get_signal_strength()
{
    local netfile="/proc/net/wireless"
    local dbm=$(tail -1 "${netfile}" | awk '{ print $3 }')
    if is_integer "${dbm}"; then
        if ! is_connected; then
            exit ${ESIG}
        fi
    else
        exit ${ESIGVAL}
    fi

    local signal=$(echo "scale=2; ${dbm}/70*100" | bc)
    echo "${signal} / 1" | bc
}

# ******************************************************************************
# Return wifi SSID
get_ssid()
{
    local iface="${1}"
    iw dev "${iface}" link \
        | grep SSID \
        | cut -f2 -d':' \
        | sed 's/^[ \t]*//'
}

# ******************************************************************************
# Return list of network interfaces
get_network_interfaces()
{
    local IFS=$'\n'
    local line=
    for line in $(ip link show); do
        if ! is_integer "${line:0:1}"; then
            continue
        fi
        echo "${line}" | awk '{ print $2 }' | tr -d ':'
    done
}

# ******************************************************************************
# Check if signal is connected
is_connected()
{
    local addr=$(ip route | grep default | cut -f3 -d' ')

    ping -q -W 1 -c 1 "${addr}" &> /dev/null
    if [ $? -eq 0 ]; then
        return 0
    fi
    return 1
}

# ******************************************************************************
# Check if is network interface
is_interface()
{
    local input="${1}"
    if [ -z "${input}" ]; then
        return 1
    fi

    local iface=
    for iface in $(get_network_interfaces); do
        if [ "${iface}" == "${input}" ]; then
            return 0
        fi
    done
    return 1
}

# ******************************************************************************
# Check if multiple arguments are used when they should not be
check_multi_arg()
{
    case "${1}" in
        INFO)
            if [ -n "${SCAN}" -o -n "${CONNECT}" -o -n "${DISCONNECT}" \
                -o -n "${LIST}" -o -n "${PRIVATE}" -o -n "${PUBLIC}" ]
            then
                print_err "Unable to initialize script: Must specify only one option."
                exit ${EARG}
            fi
            ;;

        SCAN)
            if [ -n "${INFO}" -o -n "${CONNECT}" -o -n "${DISCONNECT}" \
                -o -n "${LIST}" -o -n "${PRIVATE}" -o -n "${PUBLIC}" ]
            then
                print_err "Unable to initialize script: Must specify only one option."
                exit ${EARG}
            fi
            ;;

        CONNECT)
            if [ -n "${INFO}" -o -n "${SCAN}" -o -n "${DISCONNECT}" \
                -o -n "${LIST}" -o -n "${PRIVATE}" -o -n "${PUBLIC}" ]
            then
                print_err "Unable to initialize script: Must specify only one option."
                exit ${EARG}
            fi
            ;;

        DISCONNECT)
            if [ -n "${INFO}" -o -n "${SCAN}" -o -n "${CONNECT}" \
                -o -n "${LIST}" -o -n "${PRIVATE}" -o -n "${PUBLIC}" ]
            then
                print_err "Unable to initialize script: Must specify only one option."
                exit ${EARG}
            fi
            ;;

        LIST)
            if [ -n "${INFO}" -o -n "${SCAN}" -o -n "${CONNECT}" \
                -o -n "${CONNECT}" -o -n "${PRIVATE}" -o -n "${PUBLIC}" ]
            then
                print_err "Unable to initialize script: Must specify only one option."
                exit ${EARG}
            fi
            ;;

        PRIVATE)
            if [ -n "${INFO}" -o -n "${SCAN}" -o -n "${CONNECT}" \
                -o -n "${CONNECT}" -o -n "${LIST}" -o -n "${PUBLIC}" ]
            then
                print_err "Unable to initialize script: Must specify only one option."
                exit ${EARG}
            fi
            ;;

        PUBLIC)
            if [ -n "${INFO}" -o -n "${SCAN}" -o -n "${CONNECT}" \
                -o -n "${CONNECT}" -o -n "${LIST}" -o -n "${PRIVATE}" ]
            then
                print_err "Unable to initialize script: Must specify only one option."
                exit ${EARG}
            fi
            ;;

        *)
            ;;
    esac
}

# ******************************************************************************
# Run script
main "${@}"
